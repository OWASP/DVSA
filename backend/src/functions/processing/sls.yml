provider:
  name: aws
  runtime: python3.8
  versionFunctions: false

custom:
  accountId: ${file(backend/serverless/scripts/vars.js):accountId}

functions:

  FeedbackUploads:
    name: DVSA-FEEDBACK-UPLOADS
    handler: backend/src/functions/processing/feedback_uploads.lambda_handler
    role: dvsaFeedbackRole
    environment:
      FEEDBACK_BUCKET: !Sub dvsa-feedback-bucket-${AWS::AccountId}
    timeout: 10
    memorySize: 128
    package:
      include:
        - backend/src/functions/processing/feedback_uploads.py
    events:
      - s3:
          bucket: 'dvsa-feedback-bucket-${self:custom.accountId}'
          existing: true
          event: s3:ObjectCreated:*

  CreateReceipt:
    name: DVSA-CREATE-RECEIPT
    handler: backend/src/functions/processing/create_receipt.lambda_handler
    role: dvsaCreateReceiptRole
    environment:
      INVENTORY_TABLE: DVSA-INVENTORY-DB
      ORDERS_TABLE: DVSA-ORDERS-DB
      RECEIPTS_BUCKET: !Sub dvsa-receipts-bucket-${AWS::AccountId}
    timeout: 10
    memorySize: 128
    package:
      include:
        - backend/src/functions/processing/create_receipt.py
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          batchSize: 1

  PaymentProcessor:
    name: DVSA-PAYMENT-PROCESSOR
    handler: backend/src/functions/processing/payment_processing.lambda_handler
    role: dvsaPaymentProcessingRole
    timeout: 30
    memorySize: 128
    events:
    - http:
        path: payment
        method: POST
        cors: true
    package:
      include:
        - backend/src/functions/processing/payment_processing.py
        - backend/src/functions/processing/helper.pyc

  GetTotal:
    name: DVSA-GET-CART-TOTAL
    handler: backend/src/functions/processing/get_cart_total.lambda_handler
    role: dvsaCartTotalRole
    environment:
      INVENTORY_TABLE: DVSA-INVENTORY-DB
    timeout: 10
    memorySize: 128
    events:
    - http:
        path: total
        method: POST
        cors: true
    package:
      include:
        - backend/src/functions/processing/get_cart_total.py

  SendReceipt:
    name: DVSA-SEND-RECEIPT-EMAIL
    handler: backend/src/functions/processing/send_receipt_email.lambda_handler
    role: dvsaCreateReceiptRole
    environment:
      ORDERS_TABLE: DVSA-ORDERS-DB
      SOURCE_EMAIL: dvsa.noreply@1secmail.com
    timeout: 10
    memorySize: 128
    events:
    - s3:
        bucket: 'dvsa-receipts-bucket-${self:custom.accountId}'
        existing: true
        event: s3:ObjectCreated:*
        rules:
        - suffix: .raw
    package:
      include:
        - backend/src/functions/processing/send_receipt_email.py

resources:
  Resources:
    SQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "dvsa-order-paid-sqs"

    #--------------------------
    # Role: dvsaFeedbackRole
    #--------------------------
    dvsaFeedbackRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dvsaFeedbackRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DVSAFeedbackRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: {'Fn::Join': [':', ['arn:aws:logs', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'log-group:/aws/lambda/*:*:*']]}
                - Effect: "Allow"
                  Action:
                    - ses:*
                    - s3:*
                  Resource: "*"


    #--------------------------
    # Role: dvsaCreateReceiptRole
    #--------------------------
    dvsaCreateReceiptRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DVSACreateReceiptRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DVSACreateReceiptRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: {'Fn::Join': [':', ['arn:aws:logs', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'log-group:/aws/lambda/*:*:*']]}
                - Effect: "Allow"
                  Action:
                    - sqs:*
                    - ses:*
                    - s3:*
                    - dynamodb:*
                    - sts:*
                  Resource: "*"
    #--------------------------
    # Role: dvsaPaymentProcessingRole
    #--------------------------
    dvsaPaymentProcessingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DVSAPaymentProcessingRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DVSAPaymentProcessingRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: {'Fn::Join': [':', ['arn:aws:logs', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'log-group:/aws/lambda/*:*:*']]}
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource: {'Fn::Join': [':', ['arn:aws:dynamodb', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'table/*']]}
    
    #--------------------------
    # Role: dvsaCartTotalRole
    #--------------------------
    dvsaCartTotalRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DVSACartTotalRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DVSACartTotalRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: {'Fn::Join': [':', ['arn:aws:logs', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'log-group:/aws/lambda/*:*:*']]}
                - Effect: Allow
                  Action:
                    - events:*
                  Resource: {'Fn::Join': [':', ['arn:aws:events', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'rule/*']]}
                - Effect: Allow
                  Action:
                    - iam:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource: {'Fn::Join': [':', ['arn:aws:dynamodb', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'table/*']]}
                - Effect: Allow
                  Action:
                    - rds:*
                  Resource:
                    - {'Fn::Join': [':', ['arn:aws:rds', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'cluster:*']]}
                    - {'Fn::Join': [':', ['arn:aws:rds', {Ref: 'AWS::Region'}, {Ref: 'AWS::AccountId'}, 'db:*']]}
